{"version":3,"file":"background.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,+BAA+B,eAAe;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,kBAAkB;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA","sources":["webpack://trustee/./src/background.ts"],"sourcesContent":["\"use strict\";\n// Initialize the extension\nconsole.log('Background script initializing...');\n// Enable side panel functionality\nchrome.sidePanel\n    .setPanelBehavior({ openPanelOnActionClick: true })\n    .catch((error) => console.error('Error setting panel behavior:', error));\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Background received message:', message);\n    if (message.action === 'OPEN_FRONTEND_PANEL') {\n        // Ensure we return true immediately to indicate we'll send an async response\n        try {\n            // First check if we can get the current window\n            chrome.windows.getCurrent()\n                .then(window => {\n                // Set the side panel to be enabled and point to the iframe page\n                return chrome.sidePanel.setOptions({\n                    enabled: true,\n                    path: 'sidepanel.html',\n                    // Specify for the current window\n                    tabId: sender.tab?.id\n                });\n            })\n                .then(() => {\n                // Open the side panel for the specific tab that sent the message\n                return chrome.windows.getCurrent()\n                    .then(window => {\n                    if (!window.id) {\n                        throw new Error('No valid window ID found');\n                    }\n                    return chrome.sidePanel.open({\n                        windowId: window.id\n                    });\n                });\n            })\n                .then(() => {\n                console.log('Side panel opened successfully');\n                sendResponse({ success: true });\n            })\n                .catch((error) => {\n                console.error('Error in opening sidepanel:', error);\n                sendResponse({\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n            });\n            return true; // Indicates we will send a response asynchronously\n        }\n        catch (error) {\n            console.error('Error in message handler:', error);\n            sendResponse({\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n        }\n    }\n    return false; // For all other messages, we won't send a response\n});\n// Handle installation and updates\nchrome.runtime.onInstalled.addListener(async (details) => {\n    console.log('Extension installed/updated:', details.reason);\n    try {\n        // Set the default sidepanel behavior\n        await chrome.sidePanel.setOptions({\n            enabled: true,\n            path: 'sidepanel.html'\n        });\n        console.log('Side panel options set successfully');\n    }\n    catch (error) {\n        console.error('Error during initialization:', error);\n    }\n});\n// Handle when a tab is updated\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === 'complete') {\n        console.log('Tab updated:', tabId, tab.url);\n    }\n});\n// Handle when extension starts up\nchrome.runtime.onStartup.addListener(() => {\n    console.log('Extension starting up...');\n});\n// Log that background script is ready\nconsole.log('Background script ready!');\n"],"names":[],"sourceRoot":""}