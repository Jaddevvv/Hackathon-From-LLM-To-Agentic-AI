{"version":3,"file":"background.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,8DAA8D,gBAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mCAAmC;AACzF;AACA;AACA;AACA,uEAAuE,2BAA2B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kCAAkC;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,+BAA+B,eAAe;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,kBAAkB;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA","sources":["webpack://trustee/./src/background.ts"],"sourcesContent":["\"use strict\";\n// Initialize the extension\nconsole.log('Background script initializing...');\n// API endpoint configuration\nconst API_ENDPOINT = 'http://127.0.0.1:8000/api/page-source'; // Update this with your actual Python API endpoint\n// Function to send page source to API\nasync function sendToAPI(data) {\n    try {\n        const response = await fetch(API_ENDPOINT, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        });\n        if (!response.ok) {\n            throw new Error(`API request failed with status ${response.status}`);\n        }\n        return await response.json();\n    }\n    catch (error) {\n        console.error('Error sending to API:', error);\n        throw error;\n    }\n}\n// Function to get page source from active tab\nasync function getActiveTabSource() {\n    try {\n        const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });\n        if (!activeTab.id) {\n            throw new Error('No active tab found');\n        }\n        const response = await chrome.tabs.sendMessage(activeTab.id, { action: 'GET_PAGE_SOURCE' });\n        if (!response.success) {\n            throw new Error(response.error || 'Failed to get page source');\n        }\n        return response.data;\n    }\n    catch (error) {\n        console.error('Error getting page source:', error);\n        throw error;\n    }\n}\n// Enable side panel functionality\nchrome.sidePanel\n    .setPanelBehavior({ openPanelOnActionClick: true })\n    .catch((error) => console.error('Error setting panel behavior:', error));\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Background received message:', message);\n    if (message.action === 'GET_AND_SEND_PAGE_SOURCE') {\n        getActiveTabSource()\n            .then(sourceData => sendToAPI(sourceData))\n            .then(apiResponse => {\n            sendResponse({ success: true, data: apiResponse });\n        })\n            .catch(error => {\n            sendResponse({\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n        });\n        return true; // Will send response asynchronously\n    }\n    if (message.action === 'OPEN_FRONTEND_PANEL') {\n        // Ensure we return true immediately to indicate we'll send an async response\n        try {\n            // Enable the side panel first\n            chrome.sidePanel.setOptions({\n                enabled: true,\n                path: 'sidepanel.html'\n            })\n                .then(() => {\n                // Get the current window\n                return chrome.windows.getCurrent();\n            })\n                .then((window) => {\n                if (!window.id) {\n                    throw new Error('No valid window ID found');\n                }\n                // Then try to open it with the current window\n                return chrome.sidePanel.open({\n                    windowId: window.id,\n                    tabId: sender.tab?.id\n                });\n            })\n                .then(() => {\n                console.log('Side panel opened successfully');\n                sendResponse({ success: true });\n            })\n                .catch((error) => {\n                console.error('Error in opening sidepanel:', error);\n                sendResponse({\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n            });\n            return true; // Indicates we will send a response asynchronously\n        }\n        catch (error) {\n            console.error('Error in message handler:', error);\n            sendResponse({\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            });\n        }\n    }\n    return false; // For all other messages, we won't send a response\n});\n// Handle installation and updates\nchrome.runtime.onInstalled.addListener(async (details) => {\n    console.log('Extension installed/updated:', details.reason);\n    try {\n        // Set the default sidepanel behavior\n        await chrome.sidePanel.setOptions({\n            enabled: true,\n            path: 'sidepanel.html'\n        });\n        console.log('Side panel options set successfully');\n    }\n    catch (error) {\n        console.error('Error during initialization:', error);\n    }\n});\n// Handle when a tab is updated\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === 'complete') {\n        console.log('Tab updated:', tabId, tab.url);\n    }\n});\n// Handle when extension starts up\nchrome.runtime.onStartup.addListener(() => {\n    console.log('Extension starting up...');\n});\n// Log that background script is ready\nconsole.log('Background script ready!');\n"],"names":[],"sourceRoot":""}